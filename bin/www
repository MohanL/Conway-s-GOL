#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('conwayslife:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

io.on('connection', function (socket) {
  console.log('a user connected');
  storeUserInfo(socket);
  socket.on('disconnect', () => {
    console.log(`${socket.id} user disconnected`);
    delete app.users[socket.id.toString()];
  });

  socket.on('registerPoint', (point2D) => {
    const x = Math.floor(point2D.x / 10);
    const y = Math.floor(point2D.y / 10);
    console.log(`registerPoint : ${x}, ${y}`);
    app.pattern[x][y] = app.users[socket.id.toString()];
    io.emit('updateCanvas', { data: app.pattern, others: app.users });
  });
});

setInterval(() => {
  io.emit('updateCanvas', { data: app.pattern, others: app.users });
  update();
}, 1000);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


/**
  * Check which cells are still alive.
  */
function update() {

  // npc color 95, 158, 160
  const R2 = Math.pow(95, 2);
  const G2 = Math.pow(158, 2);
  const B2 = Math.pow(160, 2);

  let colorRSum;
  let colorGSum;
  let colorBSum;

  var result = [];
  var cells = app.pattern;
  /**
   * Return amount of alive neighbours for a cell
   */
  function _countNeighbours(x, y) {
    var amount = 0;
    // another function to do this
    colorRSum = 0;
    colorGSum = 0;
    colorBSum = 0;

    function _isFilled(x, y) {
      return cells[x] && cells[x][y];
    }

    if (_isFilled(x - 1, y - 1)) {
      if (cells[x - 1][y - 1] === 1) {
        colorRSum += R2;
        colorGSum += G2;
        colorBSum += B2;
      } else {
        let cellR, cellG, cellB;
        [cellR, cellG, cellB] = hexToRgb(cells[x - 1][y - 1]);
        colorRSum += Math.pow(cellR, 2);
        colorGSum += Math.pow(cellG, 2);
        colorBSum += Math.pow(cellB, 2);
      }
      amount++;
    }
    if (_isFilled(x, y - 1)) {
      if (cells[x][y - 1] === 1) {
        colorRSum += R2;
        colorGSum += G2;
        colorBSum += B2;
      } else {
        let cellR, cellG, cellB;
        [cellR, cellG, cellB] = hexToRgb(cells[x][y - 1]);
        colorRSum += Math.pow(cellR, 2);
        colorGSum += Math.pow(cellG, 2);
        colorBSum += Math.pow(cellB, 2);
      }
      amount++;
    }
    if (_isFilled(x + 1, y - 1)) {
      if (cells[x + 1][y - 1] === 1) {
        colorRSum += R2;
        colorGSum += G2;
        colorBSum += B2;
      } else {
        let cellR, cellG, cellB;
        [cellR, cellG, cellB] = hexToRgb(cells[x + 1][y - 1]);
        colorRSum += Math.pow(cellR, 2);
        colorGSum += Math.pow(cellG, 2);
        colorBSum += Math.pow(cellB, 2);
      }
      amount++;
    }
    if (_isFilled(x - 1, y)) {
      if (cells[x - 1][y] === 1) {
        colorRSum += R2;
        colorGSum += G2;
        colorBSum += B2;
      } else {
        let cellR, cellG, cellB;
        [cellR, cellG, cellB] = hexToRgb(cells[x - 1][y]);
        colorRSum += Math.pow(cellR, 2);
        colorGSum += Math.pow(cellG, 2);
        colorBSum += Math.pow(cellB, 2);
      }
      amount++;
    }
    if (_isFilled(x + 1, y)) {
      if (cells[x + 1][y] === 1) {
        colorRSum += R2;
        colorGSum += G2;
        colorBSum += B2;
      } else {
        let cellR, cellG, cellB;
        [cellR, cellG, cellB] = hexToRgb(cells[x + 1][y]);
        colorRSum += Math.pow(cellR, 2);
        colorGSum += Math.pow(cellG, 2);
        colorBSum += Math.pow(cellB, 2);
      }
      amount++;
    }
    if (_isFilled(x - 1, y + 1)) {
      if (cells[x - 1][y + 1] === 1) {
        colorRSum += R2;
        colorGSum += G2;
        colorBSum += B2;
      } else {
        let cellR, cellG, cellB;
        [cellR, cellG, cellB] = hexToRgb(cells[x - 1][y + 1]);
        colorRSum += Math.pow(cellR, 2);
        colorGSum += Math.pow(cellG, 2);
        colorBSum += Math.pow(cellB, 2);
      }
      amount++;
    }
    if (_isFilled(x, y + 1)) {
      if (cells[x][y + 1] === 1) {
        colorRSum += R2;
        colorGSum += G2;
        colorBSum += B2;
      } else {
        let cellR, cellG, cellB;
        [cellR, cellG, cellB] = hexToRgb(cells[x][y + 1]);
        colorRSum += Math.pow(cellR, 2);
        colorGSum += Math.pow(cellG, 2);
        colorBSum += Math.pow(cellB, 2);
      }
      amount++;
    }
    if (_isFilled(x + 1, y + 1)) {
      if (cells[x + 1][y + 1] === 1) {
        colorRSum += R2;
        colorGSum += G2;
        colorBSum += B2;
      } else {
        let cellR, cellG, cellB;
        [cellR, cellG, cellB] = hexToRgb(cells[x + 1][y + 1]);
        colorRSum += Math.pow(cellR, 2);
        colorGSum += Math.pow(cellG, 2);
        colorBSum += Math.pow(cellB, 2);
      }
      amount++;
    }

    return amount;
  }

  cells.forEach(function (row, x) {
    result[x] = [];
    row.forEach(function (cell, y) {
      var alive = 0,
        count = _countNeighbours(x, y);

      if (cell) {
        alive = count === 2 || count === 3 ? 1 : 0;
      } else {
        alive = count === 3 ? 1 : 0;
      }
      if (alive) {
        if(cell){
          result[x][y] = cell;
        }else{
          const newCol = rgbToHex(Math.sqrt(colorRSum / count), Math.sqrt(colorGSum / count), Math.sqrt(colorBSum / count));
          result[x][y] = newCol;
        }
      }
      else
        result[x][y] = 0;
    });
  });

  app.pattern = result;
}

function storeUserInfo(socket) {
  const color = randcolor();
  socket.emit('yourColor', color);
  let id = socket.id.toString().trim();
  app.users[id] = color;
}

function randcolor() {
  return '#' + (Math.random() * 0xFFFFFF << 0).toString(16);
}

function componentToHex(c) {
  var hex = c.toString(16);
  return hex.length == 1 ? "0" + hex : hex;
}

// rgbToHex(0, 51, 255) => #0033ff
function rgbToHex(r, g, b) {
  return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b);
}

function hexToRgb(hex) {
  // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
  var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
  hex = hex.replace(shorthandRegex, function (m, r, g, b) {
    return r + r + g + g + b + b;
  });

  var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  // console.log(`${hex}, ${result}`);
  return result ? [
    parseInt(result[1], 16),
    parseInt(result[2], 16),
    parseInt(result[3], 16)
  ] : null;
}

// hexToRgb("#0033ff").g => 51
// hexToRgb("#03f").g => 51