#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('conwayslife:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

io.on('connection', function (socket) {
  console.log('a user connected');
  storeUserInfo(socket);
  socket.on('disconnect', () => {
    console.log(`${socket.id} user disconnected`);
    delete app.users[socket.id.toString()];
  });
});

setInterval(() => {
  io.emit('updateCanvas', app.pattern);
  update();
}, 1000);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


/**
  * Check which cells are still alive.
  */
function update() {

  var result = [];
  var cells = app.pattern;
  /**
   * Return amount of alive neighbours for a cell
   */
  function _countNeighbours(x, y) {
    var amount = 0;

    function _isFilled(x, y) {
      return cells[x] && cells[x][y];
    }

    if (_isFilled(x - 1, y - 1)) amount++;
    if (_isFilled(x, y - 1)) amount++;
    if (_isFilled(x + 1, y - 1)) amount++;
    if (_isFilled(x - 1, y)) amount++;
    if (_isFilled(x + 1, y)) amount++;
    if (_isFilled(x - 1, y + 1)) amount++;
    if (_isFilled(x, y + 1)) amount++;
    if (_isFilled(x + 1, y + 1)) amount++;

    return amount;
  }

  cells.forEach(function (row, x) {
    result[x] = [];
    row.forEach(function (cell, y) {
      var alive = 0,
        count = _countNeighbours(x, y);

      if (cell > 0) {
        alive = count === 2 || count === 3 ? 1 : 0;
      } else {
        alive = count === 3 ? 1 : 0;
      }

      result[x][y] = alive;
    });
  });

  app.pattern = result;
}

function storeUserInfo(socket){
  const color = randcolor();
  socket.emit('yourColor', color);
  console.log(color);
  app.users[socket.id.toString()] = color;
  console.log(app.users);
}

function randcolor(){
  return '#' + (Math.random() * 0xFFFFFF << 0).toString(16);
}